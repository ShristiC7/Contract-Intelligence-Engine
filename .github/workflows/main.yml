name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
   - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v3
      with:
        version: 9

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    
    - name: Generate Prisma Client
      run: cd apps/api && pnpm prisma:generate
    
    - name: Run unit tests with coverage
      run: cd apps/api && pnpm test:coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    
    - name: Check coverage threshold
      run: |
        cd apps/api
        # Check if coverage meets 80% threshold
        COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below 80% threshold"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets 80% threshold"
        fi
    
    - name: Run integration tests
      run: cd apps/api && pnpm test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Start API server for load tests
      run: |
        cd apps/api
        pnpm build
        pnpm start &
        sleep 10
      env:
        NODE_ENV: production
        DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        PORT: 4000
    
    - name: Run k6 load tests
      run: cd apps/api && k6 run tests/load/contract-analysis.js
      env:
        API_URL: http://localhost:4000
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./apps/api/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          apps/api/coverage/
          apps/api/k6-results.json
        retention-days: 30

  eval:
    name: AI Evaluation Harness
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    services:
      postgres:
        image: ankane/pgvector:latest
        env:
          POSTGRES_DB: legal_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('apps/api/src/legal-agent/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      working-directory: apps/api/src/legal-agent
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"
    
    - name: Run unit tests
      working-directory: apps/api/src/legal-agent
      run: |
        python test_agent.py
    
    - name: Run RAGAS Evaluation
      working-directory: apps/api/src/legal-agent
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PG_HOST: localhost
        PG_PORT: 5432
        PG_DATABASE: legal_db
        PG_USER: postgres
        PG_PASSWORD: postgres
        FAITHFULNESS_THRESHOLD: 0.85
      run: |
        python legal_agent.py
    
    - name: Check RAGAS evaluation results
      run: |
        if [ $? -eq 0 ]; then
          echo "✅ RAGAS evaluation passed - faithfulness threshold ≥0.85 met"
        else
          echo "❌ RAGAS evaluation failed - faithfulness below 0.85 threshold"
          exit 1
        fi
    
    - name: Upload evaluation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ragas-evaluation-results
        path: apps/api/src/legal-agent/golden_set.json
        retention-days: 30

  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, eval]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: apps/api
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push Legal Agent image
      uses: docker/build-push-action@v5
      with:
        context: apps/api/src/legal-agent
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-legal-agent:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-legal-agent:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: apps/web
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Generate deployment manifest
      run: |
        cat > deployment.yml << EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: contract-intelligence-config
        data:
          API_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          LEGAL_AGENT_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-legal-agent:${{ github.sha }}
          WEB_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ github.sha }}
          GIT_SHA: ${{ github.sha }}
          GIT_BRANCH: ${{ github.ref_name }}
          BUILD_TIME: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        EOF
    
    - name: Upload deployment manifest
      uses: actions/upload-artifact@v3
      with:
        name: deployment-manifest
        path: deployment.yml
        retention-days: 30

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download deployment manifest
      uses: actions/download-artifact@v3
      with:
        name: deployment-manifest
        path: .
    
    - name: Deploy to Railway
      if: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        # Install Railway CLI
        npm install -g @railway/cli
        
        # Login to Railway
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        
        # Update environment variables
        railway variables set \
          API_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          LEGAL_AGENT_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-legal-agent:${{ github.sha }} \
          WEB_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ github.sha }} \
          GIT_SHA=${{ github.sha }} \
          GIT_BRANCH=${{ github.ref_name }} \
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
          --service ${{ secrets.RAILWAY_SERVICE_ID }}
        
        # Trigger deployment
        railway up --service ${{ secrets.RAILWAY_SERVICE_ID }}
    
    - name: Deploy to Render
      if: ${{ secrets.RENDER_API_KEY }}
      run: |
        # Update Render environment variables
        curl -X PATCH \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
            "envVars": [
              {"key": "API_IMAGE", "value": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}", "sync": false},
              {"key": "LEGAL_AGENT_IMAGE", "value": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-legal-agent:${{ github.sha }}", "sync": false},
              {"key": "WEB_IMAGE", "value": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ github.sha }}", "sync": false},
              {"key": "GIT_SHA", "value": "${{ github.sha }}", "sync": false},
              {"key": "GIT_BRANCH", "value": "${{ github.ref_name }}", "sync": false},
              {"key": "BUILD_TIME", "value": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "sync": false}
            ]
          }' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}
        
        # Trigger deployment
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys
    
    - name: Deploy to Kubernetes (if configured)
      if: ${{ secrets.KUBECONFIG }}
      run: |
        # Apply deployment manifest
        kubectl apply -f deployment.yml
        
        # Update deployment images
        kubectl set image deployment/contract-intelligence-api \
          api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        kubectl set image deployment/contract-intelligence-legal-agent \
          legal-agent=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-legal-agent:${{ github.sha }}
        kubectl set image deployment/contract-intelligence-web \
          web=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:${{ github.sha }}
        
        # Wait for rollout
        kubectl rollout status deployment/contract-intelligence-api
        kubectl rollout status deployment/contract-intelligence-legal-agent
        kubectl rollout status deployment/contract-intelligence-web
    
    - name: Health check deployment
      run: |
        echo "🔍 Performing health checks..."
        
        # Wait for services to be ready
        sleep 30
        
        # Check API health
        if [ -n "${{ secrets.API_URL }}" ]; then
          curl -f ${{ secrets.API_URL }}/health || exit 1
          echo "✅ API health check passed"
        fi
        
        # Check Legal Agent health
        if [ -n "${{ secrets.LEGAL_AGENT_URL }}" ]; then
          curl -f ${{ secrets.LEGAL_AGENT_URL }}/health || exit 1
          echo "✅ Legal Agent health check passed"
        fi
        
        echo "🎉 Deployment health checks completed successfully!"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "🚀 Services deployed with commit: ${{ github.sha }}"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
