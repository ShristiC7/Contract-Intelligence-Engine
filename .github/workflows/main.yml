  name: CI/CD Pipeline
  
  on:
    push:
      branches: [ main, develop ]
    pull_request:
      branches: [ main, develop ]
    release:
      types: [ published ]
  
  env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}
  
  jobs:
    test:
      name: Test Suite
      runs-on: ubuntu-latest
      
      services:
        redis:
          image: redis:7-alpine
          ports:
            - 6379:6379
          options: >-
            --health-cmd "redis-cli ping"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 10
  
      steps:
      - uses: actions/checkout@v4
  
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
  
      - name: Install pnpm globally
        run: npm install -g pnpm@9.10.0
  
      - name: Verify pnpm
        run: pnpm -v
  
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
  
      - name: Generate Prisma Client
        run: pnpm --filter apps/api prisma:generate
  
      - name: Run unit tests with coverage
        run: |
          set -e
          pnpm --filter apps/api test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
  
      - name: Check coverage threshold
        run: |
          sudo apt-get update && sudo apt-get install -y jq bc
          COVERAGE=$(cat apps/api/coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below 80% threshold"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets 80% threshold"
          fi
  
      - name: Run integration tests
        run: |
          set -e
          pnpm --filter apps/api test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6

      - name: Start API server for load tests
        run: |
          pnpm --filter apps/api build
          pnpm --filter apps/api start &
          sleep 10
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PORT: 4000

      - name: Run k6 load tests
        run: pnpm --filter apps/api k6 run tests/load/contract-analysis.js
        env:
          API_URL: http://localhost:4000

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/api/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            apps/api/coverage/
            apps/api/k6-results.json
          retention-days: 30
