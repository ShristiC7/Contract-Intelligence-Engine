name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js + Corepack
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable Corepack & Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.10.0 --activate
          pnpm -v

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma Client
        run: pnpm --filter apps/api prisma:generate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db

      - name: Run unit tests
        run: pnpm --filter apps/api test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Run integration tests
        run: pnpm --filter apps/api test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Run tests with coverage
        run: pnpm --filter apps/api test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/api/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  load-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js + Corepack
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable Corepack & Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.10.0 --activate
          pnpm -v

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma Client
        run: pnpm --filter apps/api prisma:generate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db

      - name: Start API server
        run: |
          pnpm --filter apps/api build
          pnpm --filter apps/api prisma:migrate
          pnpm --filter apps/api start &
          sleep 10
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PORT: 4000
    
      - name: Install k6
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg2
          curl -s https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6

      - name: Run load tests
        run: k6 run apps/api/tests/load/contract-analysis.js
        env:
          API_URL: http://localhost:4000

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k6-results
          path: apps/api/k6-results.json

  docker-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js + Corepack
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable Corepack & Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@9.10.0 --activate
          pnpm -v

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma Client
        run: pnpm --filter apps/api prisma:generate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db

      - name: Build Docker image
        run: docker build -t contract-intelligence-api apps/api

      - name: Run Docker tests
        run: docker-compose -f apps/api/docker-compose.test.yml up --abort-on-container-exit --exit-code-from test
        env:
          NODE_ENV: test
